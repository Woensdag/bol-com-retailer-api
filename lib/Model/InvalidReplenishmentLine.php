<?php
/**
 * InvalidReplenishmentLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v5
 *
 * The bol.com API for Retailers.
 *
 * OpenAPI spec version: 5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvalidReplenishmentLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvalidReplenishmentLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvalidReplenishmentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'quantity_announced' => 'int',
        'quantity_received' => 'int',
        'quantity_in_progress' => 'int',
        'quantity_with_graded_state' => 'int',
        'quantity_with_regular_state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'quantity_announced' => 'int32',
        'quantity_received' => 'int32',
        'quantity_in_progress' => 'int32',
        'quantity_with_graded_state' => 'int32',
        'quantity_with_regular_state' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'quantity_announced' => 'quantityAnnounced',
        'quantity_received' => 'quantityReceived',
        'quantity_in_progress' => 'quantityInProgress',
        'quantity_with_graded_state' => 'quantityWithGradedState',
        'quantity_with_regular_state' => 'quantityWithRegularState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'quantity_announced' => 'setQuantityAnnounced',
        'quantity_received' => 'setQuantityReceived',
        'quantity_in_progress' => 'setQuantityInProgress',
        'quantity_with_graded_state' => 'setQuantityWithGradedState',
        'quantity_with_regular_state' => 'setQuantityWithRegularState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'quantity_announced' => 'getQuantityAnnounced',
        'quantity_received' => 'getQuantityReceived',
        'quantity_in_progress' => 'getQuantityInProgress',
        'quantity_with_graded_state' => 'getQuantityWithGradedState',
        'quantity_with_regular_state' => 'getQuantityWithRegularState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_FBB_PRODUCT = 'UNKNOWN_FBB_PRODUCT';
    const TYPE_EAN_INVENTORY_RELATION = 'UNKNOWN_EAN_INVENTORY_RELATION';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FBB_PRODUCT,
            self::TYPE_EAN_INVENTORY_RELATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['quantity_announced'] = isset($data['quantity_announced']) ? $data['quantity_announced'] : null;
        $this->container['quantity_received'] = isset($data['quantity_received']) ? $data['quantity_received'] : null;
        $this->container['quantity_in_progress'] = isset($data['quantity_in_progress']) ? $data['quantity_in_progress'] : null;
        $this->container['quantity_with_graded_state'] = isset($data['quantity_with_graded_state']) ? $data['quantity_with_graded_state'] : null;
        $this->container['quantity_with_regular_state'] = isset($data['quantity_with_regular_state']) ? $data['quantity_with_regular_state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['quantity_announced'] === null) {
            $invalidProperties[] = "'quantity_announced' can't be null";
        }
        if ($this->container['quantity_received'] === null) {
            $invalidProperties[] = "'quantity_received' can't be null";
        }
        if ($this->container['quantity_in_progress'] === null) {
            $invalidProperties[] = "'quantity_in_progress' can't be null";
        }
        if ($this->container['quantity_with_graded_state'] === null) {
            $invalidProperties[] = "'quantity_with_graded_state' can't be null";
        }
        if ($this->container['quantity_with_regular_state'] === null) {
            $invalidProperties[] = "'quantity_with_regular_state' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of invalid replenishment line, in case the BSKU and/or EAN cannot be determined for this replenishment line.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets quantity_announced
     *
     * @return int
     */
    public function getQuantityAnnounced()
    {
        return $this->container['quantity_announced'];
    }

    /**
     * Sets quantity_announced
     *
     * @param int $quantity_announced The amount of announced quantity for this replenishment line.
     *
     * @return $this
     */
    public function setQuantityAnnounced($quantity_announced)
    {
        $this->container['quantity_announced'] = $quantity_announced;

        return $this;
    }

    /**
     * Gets quantity_received
     *
     * @return int
     */
    public function getQuantityReceived()
    {
        return $this->container['quantity_received'];
    }

    /**
     * Sets quantity_received
     *
     * @param int $quantity_received The amount of received quantity for this replenishment line.
     *
     * @return $this
     */
    public function setQuantityReceived($quantity_received)
    {
        $this->container['quantity_received'] = $quantity_received;

        return $this;
    }

    /**
     * Gets quantity_in_progress
     *
     * @return int
     */
    public function getQuantityInProgress()
    {
        return $this->container['quantity_in_progress'];
    }

    /**
     * Sets quantity_in_progress
     *
     * @param int $quantity_in_progress The amount of quantity that is still in progress at the warehouse for this replenishment line.
     *
     * @return $this
     */
    public function setQuantityInProgress($quantity_in_progress)
    {
        $this->container['quantity_in_progress'] = $quantity_in_progress;

        return $this;
    }

    /**
     * Gets quantity_with_graded_state
     *
     * @return int
     */
    public function getQuantityWithGradedState()
    {
        return $this->container['quantity_with_graded_state'];
    }

    /**
     * Sets quantity_with_graded_state
     *
     * @param int $quantity_with_graded_state The quantity within this shipment line that has a graded (unsalable) state.
     *
     * @return $this
     */
    public function setQuantityWithGradedState($quantity_with_graded_state)
    {
        $this->container['quantity_with_graded_state'] = $quantity_with_graded_state;

        return $this;
    }

    /**
     * Gets quantity_with_regular_state
     *
     * @return int
     */
    public function getQuantityWithRegularState()
    {
        return $this->container['quantity_with_regular_state'];
    }

    /**
     * Sets quantity_with_regular_state
     *
     * @param int $quantity_with_regular_state The quantity within this shipment line that has a regular (salable) state.
     *
     * @return $this
     */
    public function setQuantityWithRegularState($quantity_with_regular_state)
    {
        $this->container['quantity_with_regular_state'] = $quantity_with_regular_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


